<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>Tableu Embedded Serbamulia</title>
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link
      rel="stylesheet"
      type="text/css"
      media="screen"
      href="<%- pathUrl %>/stylesheets/style.css"
    />
    <link
      href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css"
      rel="stylesheet"
      crossorigin="anonymous"
    />
    <!-- Alpine Plugins -->
    <script defer src="https://cdn.jsdelivr.net/npm/@alpinejs/mask@3.x.x/dist/cdn.min.js"></script>
    <script
      defer
      src="https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js"
    ></script>
    <!-- <script
      src="https://connectors.tableau.com/libs/tableauwdc-2.3.latest.js"
      type="text/javascript"
    ></script> -->
    <script
      type="module"
      src="https://public.tableau.com/javascripts/api/tableau.embedding.3.latest.min.js"
    ></script>
  </head>
  <body x-data="{ 
    open: false, 
    selectedId:'automotive',
    koefisien1: 0,
    koefisien2: 0,
    intercept: 0,
    enr: 0,
    sales_volume: 0,
    sales: 0,
    result: 0
}">
    <div class="p-2 flex justify-between items-center">
        <div>
			<label for="HeadlineAct" class="text-3xl font-medium text-gray-900">
              Choose Chart:
            </label>
      
            <select
              x-data="{groups: [], url: ''}"
              x-init="groups = getDropdownItem()"
              name="HeadlineAct"
              id="HeadlineAct"
              class="min-w-60 rounded-lg border-gray-300 text-gray-700 text-2xl"
              x-on:change="(e) => handleOptionClick(e, $data)"
			  style="padding:10px 20px;margin:0 0 15px 10px"
            >
              <option value="">Please select</option>
              <template x-for="(group,groupIndex) in groups" :key="groupIndex">
                <template x-if="group.group.toLowerCase() === 'financial model'">
                  <optgroup :label="group.group">
                    <template x-for="(item,itemIndex) in group.items" :key="itemIndex">
                      <option :value="item.c_embed" x-text="item.c_title"></option>
                    </template>
                  </optgroup>
                </template>
              </template>
            </select>
        </div>

        <div class="flex items-center gap-4">
              <select
                x-data="{groups: [], url: ''}"
                x-init="groups = getDropdownCalculateTypeItem()"
                name="HeadlineAct"
                id="HeadlineAct"
                class="min-w-60 rounded-lg border-gray-300 text-gray-700 text-2xl"
                x-on:change="(e) => handleCalculateTypeOptionClick(e, $data)"
                x-model="selectedId"
				style="padding:10px 20px;margin:0 0 15px 10px"
              >
                <option value="">Please select</option>
                <template x-for="(group,groupIndex) in groups" :key="groupIndex">
                  <optgroup :label="group.groupValue">
                    <template x-for="(item,itemIndex) in group.items" :key="itemIndex">
                      <option :selected="item.id === selectedId" :value="item.id" x-text="item.value"></option>
                    </template>
                  </optgroup>
                </template>
              </select>
              <button @click="open = ! open" class="inline-block rounded-full border border-[#2a2874] bg-[#2a2874] p-3 text-white hover:bg-gray-900 hover:text-white focus:outline-none focus:ring focus:ring-gray-900 active:text-blue-900" style="margin-top:-15px">
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-square-sigma"><rect width="18" height="18" x="3" y="3" rx="2"/><path d="M16 8.9V7H8l4 5-4 5h8v-1.9"/>
                </svg>
            </button>
        </div>
    </div>
    
    <!-- regression input -->
    <div x-show="open" @click.outside="open = false" class="max-w-2xl p-2" x-transition style="float:right">
        <div class="rounded-lg bg-[#2a2874] p-8 shadow-lg lg:col-span-3 lg:p-12">
            <h4 class="px-2 text-white font-bold mb-4 underline underline-offset-2">
              <span>Regression - </span>
              <template x-if="selectedId === 'automotive'">
                <span>Automotive</span>
                </template>
              <template x-if="selectedId === 'finser'">
                <span>Finser</span>
                </template>
              <template x-if="selectedId === 'retail'">
                <span>Retail</span>
                </template>
            </h4>
            <form action="#" class="space-y-4">
                <h5 class="px-2 text-white font-bold">
                    <span>Model Formula: </span><br/>
                    <template x-if="selectedId === 'automotive'">
                      <span>(Koefisien 1 x Sales Volume^2) + ((Koefisien 2 x Sales Volume) + Intercept)</span>
                      </template>
                    <template x-if="selectedId === 'finser'">
                      <span>(Koefisien 1 x ENR^2) + ((Koefisien 2 x ENR) + Intercept)</span>
                      </template>
                    <template x-if="selectedId === 'retail'">
                      <span>(Koefisien 1 x Sales^2) + ((Koefisien 2 x Sales) + Intercept)</span>
                      </template>
                </h5>
                <div class="grid grid-cols-1 gap-4 sm:grid-cols-2">
                <div>
                    <label class="block text-xs font-medium text-white" for="email">Koefisien 1</label>
                    <input
                    x-model="koefisien1"
                    inputmode="numeric"
                    class="w-full rounded-lg border-gray-200 p-3 text-2xl"
                    placeholder=" 0.000000000000077282"
                    type="text"
                    id="koefisien1"
                    x-mask:dynamic="$money($input, '.', ',', 30)"
                    />
                </div>
    
                <div>
                    <label class="block text-xs font-medium text-white" for="phone">Koefisien 2</label>
                    <input
                    x-model="koefisien2"
                    inputmode="numeric"
                    class="w-full rounded-lg border-gray-200 p-3 text-2xl"
                    placeholder="0.000600213"
                    type="text"
                    id="koefisien2"
                    x-mask:dynamic="$money($input, '.', ',', 30)"
                    />
                </div>
                </div>

                <div>
                <label class="block text-xs font-medium text-white" for="name">Intercept</label>
                <input
                    x-model="intercept"
                    inputmode="numeric"
                    class="w-full rounded-lg border-gray-200 p-3 text-2xl"
                    placeholder=" 34,790,700"
                    type="text"
                    id="intercept"
                    x-mask:dynamic="$money($input, '.', ',', 30)"
                />
                </div>

                <template x-if="selectedId === 'automotive'">
                  <div>
                    <h5 class="px-2 text-white font-bold">Profit Simulation from Sales Volume</h5>
                    <div>
                        <label class="block text-xs font-medium text-white" for="sales_volume">Sales Volume</label>
                        <input
                            x-model="sales_volume"
                            inputmode="numeric"
                            class="w-full rounded-lg border-gray-200 p-3 text-2xl"
                            placeholder=" 75,000,000,000"
                            type="text"
                            id="sales_volume"
                            x-mask:dynamic="$money($input, '.', ',', 30)"
                        />
                    </div>
                  </div>
              </template>
                <template x-if="selectedId === 'finser'">
                  <div>
                    <h5 class="px-2 text-white font-bold">Profit Simulation from ENR</h5>
                    <div>
                        <label class="block text-xs font-medium text-white" for="enr">ENR</label>
                        <input
                            x-model="enr"
                            inputmode="numeric"
                            class="w-full rounded-lg border-gray-200 p-3 text-2xl"
                            placeholder=" 75,000,000,000"
                            type="text"
                            id="enr"
                            x-mask:dynamic="$money($input, '.', ',', 30)"
                        />
                    </div>
                  </div>
              </template>
                <template x-if="selectedId === 'retail'">
                  <div>
                    <h5 class="px-2 text-white font-bold">Profit Simulation from Sales</h5>
                    <div>
                        <label class="block text-xs font-medium text-white" for="sales">Sales</label>
                        <input
                            x-model="sales"
                            inputmode="numeric"
                            class="w-full rounded-lg border-gray-200 p-3 text-2xl"
                            placeholder=" 75,000,000,000"
                            type="text"
                            id="sales"
                            x-mask:dynamic="$money($input, '.', ',', 30)"
                        />
                    </div>
                  </div>
              </template>

                <div class="mt-4">
                <button
                    x-on:click="(e) => handleCalculateClick(e, $data)"
                    type="button"
                    class="inline-block w-full rounded-lg bg-black px-5 py-3 font-medium text-white sm:w-auto"
                >
                    Calculate
                </button>
                </div>

                  <!-- result -->
                  <div id="pbt-result">
                    <h5 class="px-2 text-white font-bold">Result</h5>
                    <div>
                      <label class="block text-xs font-medium text-white" for="enr">Profit</label>
                      <input
                      x-model="result"
                      inputmode="numeric"
                      class="w-full rounded-lg text-white border-yellow-500 p-3 text-2xl border-2 bg-black"
                      placeholder=" 1000,000,000,000"
                      type="text"
                      id="pbt-result-number"
                      readonly
                      x-mask:dynamic="$money($input, '.', ',', 30)"
                  />
                    </div>
                </div>
                <!-- --------------- -->
            </form>
            </div>
    </div>
      <!-- --------------------- -->

    <div>
      <tableau-viz
        id="tableau-viz"
        token="<%- token %>"
        hide-tabs
        toolbar="bottom"
      ></tableau-viz>
    </div>
  </body>
  <script>
    const getDropdownCalculateTypeItem = () => {
        const calculateTypeItems = [
            {
                groupId:"regression",
                groupValue: "Regression",
                items: [
                {
                id: "automotive",
                value:"Automotive",
            },
            {
                id: "finser",
                value:"Financal Service"
            },
            {
                id: "retail",
                value:"Retail"
            }
                ]
            }
        ]
        return calculateTypeItems
    }
    const getDropdownItem = () => {
      const jsonData = JSON.parse('<%- master %>');

      // Create an object to store unique items within each group
      const groupedItems = {};

      // Iterate through each group
      jsonData.forEach((group) => {
        // Get the group key (assuming the group is the same for all items in the array)
        const groupKey = group[0].group;

        // Initialize the group if it doesn't exist
        if (!groupedItems[groupKey]) {
          groupedItems[groupKey] = [];
        }

        // Push unique items into the corresponding group
        group.forEach((item) => {
          const existingItemIndex = groupedItems[groupKey].findIndex(
            (existingItem) => existingItem.n_id === item.items.n_id
          );
          if (existingItemIndex === -1) {
            groupedItems[groupKey].push(item.items);
          }
        });
      });

      // Convert object values back to an array
      const resultArray = Object.entries(groupedItems).map(
        ([group, items]) => ({
          group,
          items,
        })
      );

      return resultArray;
    };
    // console.log(getDropdownItem());
    function handleOptionClick(event, { url }) {
      url = event.target.value;
      // console.log("Clicked value:", url);

      const element = document.getElementById("tableau-viz");
      element.setAttribute("src", url);
    }
    function handleCalculateTypeOptionClick(event, data) {
      console.log("Clicked value:", data.selectedId);
    }
    function numberFormat(value){
      const formatter = new Intl.NumberFormat();
      return formatter.format(value)
    }
    function convertCurrencyToFloat(currencyString) {
    // Remove currency symbol and separators
    const cleanedString = currencyString.replace(/[^\d.-]/g, '');
    
    // Parse as float
    const floatValue = parseFloat(cleanedString);

    return floatValue;
  }
    function handleCalculateClick(event, data) {
      // const element = document.getElementById("pbt-result-number"); //<-- this is using vanila js
      switch (data.selectedId) {
        case "automotive":
          const pbtResultAutomotive = ((convertCurrencyToFloat(data.koefisien1) * Math.pow(convertCurrencyToFloat(data.sales_volume), 2)) + (convertCurrencyToFloat(data.koefisien2) * convertCurrencyToFloat(data.sales_volume)) + convertCurrencyToFloat(data.intercept))
          // element.textContent = pbtResultAutomotive 
          data.result = numberFormat(pbtResultAutomotive)
          break;
        case "finser":
        const pbtResultFinser = ((convertCurrencyToFloat(data.koefisien1) * Math.pow(convertCurrencyToFloat(data.enr), 2)) + (convertCurrencyToFloat(data.koefisien2) * convertCurrencyToFloat(data.enr)) + convertCurrencyToFloat(data.intercept))
        // element.textContent = pbtResultFinser
        data.result = numberFormat(pbtResultFinser)
          break;
        case "retail":
        const pbtResultRetail = ((convertCurrencyToFloat(data.koefisien1) * Math.pow(convertCurrencyToFloat(data.sales), 2)) + (convertCurrencyToFloat(data.koefisien2) * convertCurrencyToFloat(data.sales)) + convertCurrencyToFloat(data.intercept))
        // element.textContent = pbtResultRetail
        data.result = numberFormat(pbtResultRetail)
          break;
      
        default:
          // element.textContent = "null"
          data.result = "null"
          break;
      }
    }
  </script>
</html>
